cmake_minimum_required (VERSION 3.0)
project                (particleGL)

set(CXX_FLAGS -std=c++11 -g -Wall)
string(REPLACE ";" " " CMAKE_CXX_FLAGS "${CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG   "-O0" )
set(CMAKE_CXX_FLAGS_RELEASE "-O2 -finline-limit=1000 -DNDEBUG " )

# set output path
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/build/bin)

# Modules
# set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/modules/")

# Config
# configure_file(config/root_directory.h.in config/root_directory.h)

# include directories
include_directories(${PROJECT_SOURCE_DIR}/src ${PROJECT_SOURCE_DIR}/include)

# Code to be compiled
# file(GLOB_RECURSE SRC ${PROJECT_SOURCE_DIR}/src/*.h ${PROJECT_SOURCE_DIR}/src/*.c ${PROJECT_SOURCE_DIR}/src/*.cpp)
set(SOURCES src/glad.c src/stb_image.h src/consoleMsg/consoleMsg.cpp src/main.cpp)

add_executable(${PROJECT_NAME} ${SOURCES})

find_package(glfw3 3.2 REQUIRED)

target_link_libraries(${PROJECT_NAME} glfw)

# find_package(assimp REQUIRED)
# include_directories(${ASSIMP_INCLUDE_DIRS})
# target_link_libraries(${PROJECT_NAME} ${ASSIMP_LIBRARY})

find_package(OpenGL REQUIRED)

target_include_directories(${PROJECT_NAME} PUBLIC ${OPENGL_INCLUDE_DIR})

target_link_libraries(${PROJECT_NAME} ${OPENGL_gl_LIBRARY})

# GLEW
find_package(GLEW REQUIRED)
if (GLEW_FOUND)
    include_directories(${GLEW_INCLUDE_DIRS})
    link_libraries(${GLEW_LIBRARIES})
endif(GLEW_FOUND)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

add_custom_target(run
    COMMAND make
    COMMAND ./bin/${PROJECT_NAME}
    ${PROJECT_SOURCE_DIR}/build
)
